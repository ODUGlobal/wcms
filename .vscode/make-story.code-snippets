{
  "make-story": {
    "scope": "typescript",
    "prefix": "make-story",
    "body": [
      "import { Story, Meta } from '@components/_ts-helpers/types';",
      "import makeComponentInjector from '@components/_ts-helpers/make-component-injector';",
      "",
      "import ${1:${TM_FILENAME_BASE/(.*)\\..+$/$1/}}Template from './$1.twig';",
      "",
      "const $1PureComponent = (twigContext: $1TwigContext) => $1Template(twigContext);",
      "",
      "// should exactly match the context-signature of `$1.twig`",
      "export type $1TwigContext = {",
      "\tfoo?: never; // leave this if it prevents the type from being empty",
      "};",
      "",
      "const meta: Meta = {",
      "\ttitle: '${2:${1/([^^A-Z])([A-Z])/$1 $2/g}}/${1/([^^A-Z])([A-Z])/$1 $2/g}',",
      "\texcludeStories: ['$1'],",
      "};",
      "",
      "export default meta;",
      "",
      "export const $1Story: Story<$1Args> = {",
      "\tname: '${1/([^^A-Z])([A-Z])/$1 $2/g}',",
      "",
      "\tparameters: {",
      "\t\trender: ({ foo }) => {",
      "\t\t\t// story rendering logic goes here",
      "\t\t\treturn $1PureComponent({ foo });",
      "\t\t},",
      "\t},",
      "",
      "\targs: {},",
      "};",
      "",
      "type $1Args = Partial<$1TwigContext> & {",
      "\tfoo?: never; // leave this if it prevents the type from being empty",
      "};",
      "",
      "export const $1 = makeComponentInjector({",
      "\tpureComponent: $1PureComponent,",
      "\tstoryRenderFn: $1Story.parameters.render,",
      "\tdefaultArgs: $1Story.args,",
      "});",
      ""
    ]
  },

  "make-story-plus": {
    "scope": "typescript",
    "prefix": "make-story-plus",
    "body": [
      "import { Story, Meta } from '@components/_ts-helpers/types';",
      "import makeComponentInjector from '@components/_ts-helpers/make-component-injector';",
      "",
      "import ${1:${TM_FILENAME_BASE/(.*)\\..+$/$1/}}Template from './$1.twig';",
      "",
      "const $1PureComponent = (twigContext: $1TwigContext) => $1Template(twigContext);",
      "",
      "// should exactly match the context-signature of `$1.twig`",
      "export type $1TwigContext = {",
      "\tfoo?: never; // leave this if it prevents the type from being empty",
      "};",
      "",
      "// lists all keys from `$1TwigContext` (makes `|inject_template({ ... })` syntax safer)",
      "const injectHelper: {",
      "\t[K in keyof Required<$1TwigContext>]: K;",
      "} = {",
      "\tfoo: 'foo',",
      "};",
      "",
      "const meta: Meta = {",
      "\ttitle: '${2:${1/([^^A-Z])([A-Z])/$1 $2/g}}/${1/([^^A-Z])([A-Z])/$1 $2/g}',",
      "\texcludeStories: ['$1'],",
      "};",
      "",
      "export default meta;",
      "",
      "export const $1Story: Story<$1Args> = {",
      "\tname: '${1/([^^A-Z])([A-Z])/$1 $2/g}',",
      "",
      "\tparameters: {",
      "\t\trender: ({ foo }) => {",
      "\t\t\t// story rendering logic goes here",
      "\t\t\treturn $1PureComponent({ foo });",
      "\t\t},",
      "\t},",
      "",
      "\targs: {},",
      "};",
      "",
      "type $1Args = Partial<$1TwigContext> & {",
      "\tfoo?: never; // leave this if it prevents the type from being empty",
      "};",
      "",
      "export const $1 = makeComponentInjector({",
      "\ttwigContextKeys: Object.values(injectHelper),",
      "\tpureComponent: $1PureComponent,",
      "\tstoryRenderFn: $1Story.parameters.render,",
      "\tdefaultArgs: $1Story.args,",
      "});",
      ""
    ]
  }
}