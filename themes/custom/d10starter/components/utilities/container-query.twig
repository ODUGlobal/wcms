{#
  NOTE: AT THE MOMENT, THIS IS NOT ENABLED IN THIS PROJECT
  (BECAUSE IT'S NOT USED AND WOULD ADD CSS BLOAT).
  If it's needed, would have to configure the PostCSS config accordingly.
#}

<div data-container-query-ancestor class="!px-0 !border-x-0 {{ extraClasses|default('') }}">{# b/c we use `contentBoxSize` in `container-query.ts` #}
  {% block component %}{{ component }}{% endblock %}
</div>

{#
  This supports ONE layer of nesting
  (i.e., `[data-container-query-ancestor] [data-container-query-ancestor]` is okay, but
  not `[data-container-query-ancestor] [data-container-query-ancestor] [data-container-query-ancestor]`).
  The idea is, slap one on the main area next to a sidebar, and then you can still
  use it sparingly inside there (like for a WYSIWYG-embed).

  Works in conjunction with `container-query.ts` (`container-query.js` on the CMS side),
  responsive Tailwind utility classes, and a custom PostCSS plugin.

  When you wrap a component in this utility, the responsive Tailwind utility classes
  (like `sm:...`) on any elements within it get altered by the JS in such a way
  that they're "converted" to CONTAINER-query rules, with this `<div>` as the reference container.
  Note: the responsive variant needn't come first (i.e., `peer-hover:sm:...` works too).

  In other words, use the responsive Tailwind utility classes as normal, but pipe the component
  through this utility if you need the media queries to refer to a container that isn't
  the screen (great for components that need to work both as full-width content
  and also against a sidebar).

  It's not perfect. The main flaw is that this mechanism can't counteract any
  rules in the CSS files themselves. That's because the JS mechanism uses the 
  `sm:` (etc) classes *present in the DOM* to make the transformation.
  
  For example, if there's an h2 in the component in question, a CSS rule like:

  @screen sm {
    h2 {
      @apply ...;
    }
  }

  will still kick in when the SCREEN reaches the small breakpoint. Note that this problem
  disappears if you abstract away the h2 component into its own Twig file that has the
  appropriate `sm:...` classes directly on the h2 tag. This is yet another good reason to use
  in-template utility classes as much as possible, and to minimize the use of `@apply` rules.

  If you want an element within `data-container-query` NOT to get this container-query treatment
  (i.e., so that its responsive-classes should stay responsive to the screen instead), then
  give it the `no-container-query` class.
#}